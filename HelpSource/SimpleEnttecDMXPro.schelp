TITLE:: SimpleEnttecDMXPro
summary:: interface for communication with the Enttec DMX pro device
categories::  External Control>DMX
related:: Classes/SimpleAbstractSerialDMX, Classes/SimpleEnttecDMXPro, Classes/SimpleEnttecDMXProMk2, Classes/SimpleDMXUniverse, Classes/SimpleDMXFixture, Classes/SerialPort

DESCRIPTION::
barebones and low-level implementation to handle DMX communication (send only) with the Enttec DMX Pro.


CLASSMETHODS::

METHOD:: new
create a new instance.

argument:: portid
one listed in code::SerialPort.devices::.
argument:: baudrate
baudrate of the serial port.
argument:: universeSize
size of the initial DMX universe.
argument:: cmdperiod
if code::true::, the serial port will be closed on command-period.


INSTANCEMETHODS::

PRIVATE:: initSimpleEnttecDMXPro





EXAMPLES::

code::
q = q ? ();

SerialPort.devicePattern = "/dev/tty.usbserial-EN*";
if(thisProcess.platform.name == \linux) { SerialPort.devicePattern = "/dev/ttyU*" };
q.dmxPort = SerialPort.devices[0];
q.enttec = SimpleEnttecDMXPro(q.dmxPort);
// q.enttec.latency = q.nodeLatency;

q.enttec.open;
// q.enttec.trace = true;


// cameo THUNDERWASH 600 RGBW
// DMX Mode   = 7CH_2
// DMX Adress = 477
q.light = {|env, r = 255, g = 255, b = 255, w = 255, dim = 255, flush = true, channel = 477|
	q.enttec.addChannelVals(channel, [dim, 0, 10, r, g, b, w]);
	q.enttec.sendDMX(1, flush);
};

q.lightOff = {|env, flush = true, channel = 477|
	q.light(0, 0, 0, 0, 0, flush, channel)
};

q.light(*(({255.rand}!3) ++ [0, 128]))
q.lightOff
::